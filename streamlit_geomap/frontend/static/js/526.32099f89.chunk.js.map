{"version":3,"file":"static/js/526.32099f89.chunk.js","mappings":"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","sources":["../node_modules/lit-html/src/async-directive.ts","../node_modules/lit-html/src/directives/ref.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n"],"names":["s","notifyChildrenConnectedChanged","i","t","e","_$AN","_i$_$AO","_$AO","call","o","_e","_$AM","delete","size","r","Set","has","add","c","h","this","n","arguments","length","undefined","_$AH","Array","isArray","_i$_$AP","_i$_$AQ","type","CHILD","_$AP","_$AQ","f","constructor","_$AT","super","isConnected","_$AU","_this$reconnected","_this$disconnected","reconnected","disconnected","setValue","_$Ct","_$AI","_$Ci","createRef","WeakMap","render","update","_ref","_i$options","G","rt","lt","ct","ht","options","host","element","_this$ht","globalThis","get","set","value","_o$get","_this$ht2","_this$G"],"sourceRoot":""}