{"version":3,"file":"static/js/7473.eac50452.chunk.js","mappings":"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","sources":["../node_modules/@esri/calcite-components/dist/chunks/observers.js","../node_modules/@esri/calcite-components/dist/chunks/logger.js","../node_modules/lit-html/src/async-directive.ts","../node_modules/lit-html/src/directives/ref.ts","../node_modules/@esri/calcite-components/dist/components/calcite-flow/customElement.js","../node_modules/@esri/calcite-components/dist/chunks/component.js"],"sourcesContent":["/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { isServer } from \"lit\";\nfunction createObserver(type, callback, options) {\n  if (isServer) {\n    return void 0;\n  }\n  const Observer = getObserver(type);\n  return new Observer(callback, options);\n}\nfunction getObserver(type) {\n  class ExtendedMutationObserver extends window.MutationObserver {\n    constructor(callback) {\n      super(callback);\n      this.observedEntry = [];\n      this.callback = callback;\n    }\n    observe(target, options) {\n      this.observedEntry.push({ target, options });\n      return super.observe(target, options);\n    }\n    unobserve(target) {\n      const newObservedEntries = this.observedEntry.filter((observed) => observed.target !== target);\n      this.observedEntry = [];\n      this.callback(super.takeRecords(), this);\n      this.disconnect();\n      newObservedEntries.forEach((observed) => this.observe(observed.target, observed.options));\n    }\n  }\n  return function() {\n    return type === \"intersection\" ? window.IntersectionObserver : type === \"mutation\" ? ExtendedMutationObserver : window.ResizeObserver;\n  }();\n}\nexport {\n  createObserver as c\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logLevel } from \"./runtime.js\";\nconst loggedDeprecations = /* @__PURE__ */ new Set();\nconst logLevels = {\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 4,\n  error: 8,\n  off: 10\n};\nfunction willLog(level) {\n  return logLevels[level] >= logLevels[logLevel];\n}\nfunction forwardToConsole(level, ...data) {\n  if (!willLog(level)) {\n    return;\n  }\n  const badgeTemplate = \"%ccalcite\";\n  const badgeStyle = \"background: #007AC2; color: #fff; border-radius: 4px; padding: 2px 4px;\";\n  console[level].call(this, badgeTemplate, badgeStyle, ...data);\n}\nlet listFormatter;\nconst logger = {\n  debug: (message) => forwardToConsole(\"debug\", message),\n  info: (message) => forwardToConsole(\"info\", message),\n  warn: (message) => forwardToConsole(\"warn\", message),\n  error: (message) => forwardToConsole(\"error\", message),\n  trace: (message) => forwardToConsole(\"trace\", message),\n  deprecated\n};\nfunction deprecated(context, { component, name, suggested, removalVersion }) {\n  const key = `${context}:${context === \"component\" ? \"\" : component}${name}`;\n  if (loggedDeprecations.has(key)) {\n    return;\n  }\n  loggedDeprecations.add(key);\n  const multiSuggestions = Array.isArray(suggested);\n  if (multiSuggestions && !listFormatter) {\n    listFormatter = new Intl.ListFormat(\"en\", { style: \"long\", type: \"disjunction\" });\n  }\n  const message = `[${name}] ${context} is deprecated and will be removed in ${removalVersion === \"future\" ? `a future version` : `v${removalVersion}`}.${suggested ? ` Use ${multiSuggestions ? listFormatter.format(suggested.map((suggestion) => `\"${suggestion}\"`)) : `\"${suggested}\"`} instead.` : \"\"}`;\n  forwardToConsole(\"warn\", message);\n}\nexport {\n  logger as l\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * Overview:\n *\n * This module is designed to add support for an async `setValue` API and\n * `disconnected` callback to directives with the least impact on the core\n * runtime or payload when that feature is not used.\n *\n * The strategy is to introduce a `AsyncDirective` subclass of\n * `Directive` that climbs the \"parent\" tree in its constructor to note which\n * branches of lit-html's \"logical tree\" of data structures contain such\n * directives and thus need to be crawled when a subtree is being cleared (or\n * manually disconnected) in order to run the `disconnected` callback.\n *\n * The \"nodes\" of the logical tree include Parts, TemplateInstances (for when a\n * TemplateResult is committed to a value of a ChildPart), and Directives; these\n * all implement a common interface called `DisconnectableChild`. Each has a\n * `_$parent` reference which is set during construction in the core code, and a\n * `_$disconnectableChildren` field which is initially undefined.\n *\n * The sparse tree created by means of the `AsyncDirective` constructor\n * crawling up the `_$parent` tree and placing a `_$disconnectableChildren` Set\n * on each parent that includes each child that contains a\n * `AsyncDirective` directly or transitively via its children. In order to\n * notify connection state changes and disconnect (or reconnect) a tree, the\n * `_$notifyConnectionChanged` API is patched onto ChildParts as a directive\n * climbs the parent tree, which is called by the core when clearing a part if\n * it exists. When called, that method iterates over the sparse tree of\n * Set<DisconnectableChildren> built up by AsyncDirectives, and calls\n * `_$notifyDirectiveConnectionChanged` on any directives that are encountered\n * in that tree, running the required callbacks.\n *\n * A given \"logical tree\" of lit-html data-structures might look like this:\n *\n *  ChildPart(N1) _$dC=[D2,T3]\n *   ._directive\n *     AsyncDirective(D2)\n *   ._value // user value was TemplateResult\n *     TemplateInstance(T3) _$dC=[A4,A6,N10,N12]\n *      ._$parts[]\n *        AttributePart(A4) _$dC=[D5]\n *         ._directives[]\n *           AsyncDirective(D5)\n *        AttributePart(A6) _$dC=[D7,D8]\n *         ._directives[]\n *           AsyncDirective(D7)\n *           Directive(D8) _$dC=[D9]\n *            ._directive\n *              AsyncDirective(D9)\n *        ChildPart(N10) _$dC=[D11]\n *         ._directive\n *           AsyncDirective(D11)\n *         ._value\n *           string\n *        ChildPart(N12) _$dC=[D13,N14,N16]\n *         ._directive\n *           AsyncDirective(D13)\n *         ._value // user value was iterable\n *           Array<ChildPart>\n *             ChildPart(N14) _$dC=[D15]\n *              ._value\n *                string\n *             ChildPart(N16) _$dC=[D17,T18]\n *              ._directive\n *                AsyncDirective(D17)\n *              ._value // user value was TemplateResult\n *                TemplateInstance(T18) _$dC=[A19,A21,N25]\n *                 ._$parts[]\n *                   AttributePart(A19) _$dC=[D20]\n *                    ._directives[]\n *                      AsyncDirective(D20)\n *                   AttributePart(A21) _$dC=[22,23]\n *                    ._directives[]\n *                      AsyncDirective(D22)\n *                      Directive(D23) _$dC=[D24]\n *                       ._directive\n *                         AsyncDirective(D24)\n *                   ChildPart(N25) _$dC=[D26]\n *                    ._directive\n *                      AsyncDirective(D26)\n *                    ._value\n *                      string\n *\n * Example 1: The directive in ChildPart(N12) updates and returns `nothing`. The\n * ChildPart will _clear() itself, and so we need to disconnect the \"value\" of\n * the ChildPart (but not its directive). In this case, when `_clear()` calls\n * `_$notifyConnectionChanged()`, we don't iterate all of the\n * _$disconnectableChildren, rather we do a value-specific disconnection: i.e.\n * since the _value was an Array<ChildPart> (because an iterable had been\n * committed), we iterate the array of ChildParts (N14, N16) and run\n * `setConnected` on them (which does recurse down the full tree of\n * `_$disconnectableChildren` below it, and also removes N14 and N16 from N12's\n * `_$disconnectableChildren`). Once the values have been disconnected, we then\n * check whether the ChildPart(N12)'s list of `_$disconnectableChildren` is empty\n * (and would remove it from its parent TemplateInstance(T3) if so), but since\n * it would still contain its directive D13, it stays in the disconnectable\n * tree.\n *\n * Example 2: In the course of Example 1, `setConnected` will reach\n * ChildPart(N16); in this case the entire part is being disconnected, so we\n * simply iterate all of N16's `_$disconnectableChildren` (D17,T18) and\n * recursively run `setConnected` on them. Note that we only remove children\n * from `_$disconnectableChildren` for the top-level values being disconnected\n * on a clear; doing this bookkeeping lower in the tree is wasteful since it's\n * all being thrown away.\n *\n * Example 3: If the LitElement containing the entire tree above becomes\n * disconnected, it will run `childPart.setConnected()` (which calls\n * `childPart._$notifyConnectionChanged()` if it exists); in this case, we\n * recursively run `setConnected()` over the entire tree, without removing any\n * children from `_$disconnectableChildren`, since this tree is required to\n * re-connect the tree, which does the same operation, simply passing\n * `isConnected: true` down the tree, signaling which callback to run.\n */\n\nimport {AttributePart, ChildPart, Disconnectable, Part} from './lit-html.js';\nimport {isSingleExpression} from './directive-helpers.js';\nimport {Directive, PartInfo, PartType} from './directive.js';\nexport * from './directive.js';\n\nconst DEV_MODE = true;\n\n/**\n * Recursively walks down the tree of Parts/TemplateInstances/Directives to set\n * the connected state of directives and run `disconnected`/ `reconnected`\n * callbacks.\n *\n * @return True if there were children to disconnect; false otherwise\n */\nconst notifyChildrenConnectedChanged = (\n  parent: Disconnectable,\n  isConnected: boolean\n): boolean => {\n  const children = parent._$disconnectableChildren;\n  if (children === undefined) {\n    return false;\n  }\n  for (const obj of children) {\n    // The existence of `_$notifyDirectiveConnectionChanged` is used as a \"brand\" to\n    // disambiguate AsyncDirectives from other DisconnectableChildren\n    // (as opposed to using an instanceof check to know when to call it); the\n    // redundancy of \"Directive\" in the API name is to avoid conflicting with\n    // `_$notifyConnectionChanged`, which exists `ChildParts` which are also in\n    // this list\n    // Disconnect Directive (and any nested directives contained within)\n    // This property needs to remain unminified.\n    (obj as AsyncDirective)['_$notifyDirectiveConnectionChanged']?.(\n      isConnected,\n      false\n    );\n    // Disconnect Part/TemplateInstance\n    notifyChildrenConnectedChanged(obj, isConnected);\n  }\n  return true;\n};\n\n/**\n * Removes the given child from its parent list of disconnectable children, and\n * if the parent list becomes empty as a result, removes the parent from its\n * parent, and so forth up the tree when that causes subsequent parent lists to\n * become empty.\n */\nconst removeDisconnectableFromParent = (obj: Disconnectable) => {\n  let parent, children;\n  do {\n    if ((parent = obj._$parent) === undefined) {\n      break;\n    }\n    children = parent._$disconnectableChildren!;\n    children.delete(obj);\n    obj = parent;\n  } while (children?.size === 0);\n};\n\nconst addDisconnectableToParent = (obj: Disconnectable) => {\n  // Climb the parent tree, creating a sparse tree of children needing\n  // disconnection\n  for (let parent; (parent = obj._$parent); obj = parent) {\n    let children = parent._$disconnectableChildren;\n    if (children === undefined) {\n      parent._$disconnectableChildren = children = new Set();\n    } else if (children.has(obj)) {\n      // Once we've reached a parent that already contains this child, we\n      // can short-circuit\n      break;\n    }\n    children.add(obj);\n    installDisconnectAPI(parent);\n  }\n};\n\n/**\n * Changes the parent reference of the ChildPart, and updates the sparse tree of\n * Disconnectable children accordingly.\n *\n * Note, this method will be patched onto ChildPart instances and called from\n * the core code when parts are moved between different parents.\n */\nfunction reparentDisconnectables(this: ChildPart, newParent: Disconnectable) {\n  if (this._$disconnectableChildren !== undefined) {\n    removeDisconnectableFromParent(this);\n    this._$parent = newParent;\n    addDisconnectableToParent(this);\n  } else {\n    this._$parent = newParent;\n  }\n}\n\n/**\n * Sets the connected state on any directives contained within the committed\n * value of this part (i.e. within a TemplateInstance or iterable of\n * ChildParts) and runs their `disconnected`/`reconnected`s, as well as within\n * any directives stored on the ChildPart (when `valueOnly` is false).\n *\n * `isClearingValue` should be passed as `true` on a top-level part that is\n * clearing itself, and not as a result of recursively disconnecting directives\n * as part of a `clear` operation higher up the tree. This both ensures that any\n * directive on this ChildPart that produced a value that caused the clear\n * operation is not disconnected, and also serves as a performance optimization\n * to avoid needless bookkeeping when a subtree is going away; when clearing a\n * subtree, only the top-most part need to remove itself from the parent.\n *\n * `fromPartIndex` is passed only in the case of a partial `_clear` running as a\n * result of truncating an iterable.\n *\n * Note, this method will be patched onto ChildPart instances and called from the\n * core code when parts are cleared or the connection state is changed by the\n * user.\n */\nfunction notifyChildPartConnectedChanged(\n  this: ChildPart,\n  isConnected: boolean,\n  isClearingValue = false,\n  fromPartIndex = 0\n) {\n  const value = this._$committedValue;\n  const children = this._$disconnectableChildren;\n  if (children === undefined || children.size === 0) {\n    return;\n  }\n  if (isClearingValue) {\n    if (Array.isArray(value)) {\n      // Iterable case: Any ChildParts created by the iterable should be\n      // disconnected and removed from this ChildPart's disconnectable\n      // children (starting at `fromPartIndex` in the case of truncation)\n      for (let i = fromPartIndex; i < value.length; i++) {\n        notifyChildrenConnectedChanged(value[i], false);\n        removeDisconnectableFromParent(value[i]);\n      }\n    } else if (value != null) {\n      // TemplateInstance case: If the value has disconnectable children (will\n      // only be in the case that it is a TemplateInstance), we disconnect it\n      // and remove it from this ChildPart's disconnectable children\n      notifyChildrenConnectedChanged(value as Disconnectable, false);\n      removeDisconnectableFromParent(value as Disconnectable);\n    }\n  } else {\n    notifyChildrenConnectedChanged(this, isConnected);\n  }\n}\n\n/**\n * Patches disconnection API onto ChildParts.\n */\nconst installDisconnectAPI = (obj: Disconnectable) => {\n  if ((obj as ChildPart).type == PartType.CHILD) {\n    (obj as ChildPart)._$notifyConnectionChanged ??=\n      notifyChildPartConnectedChanged;\n    (obj as ChildPart)._$reparentDisconnectables ??= reparentDisconnectables;\n  }\n};\n\n/**\n * An abstract `Directive` base class whose `disconnected` method will be\n * called when the part containing the directive is cleared as a result of\n * re-rendering, or when the user calls `part.setConnected(false)` on\n * a part that was previously rendered containing the directive (as happens\n * when e.g. a LitElement disconnects from the DOM).\n *\n * If `part.setConnected(true)` is subsequently called on a\n * containing part, the directive's `reconnected` method will be called prior\n * to its next `update`/`render` callbacks. When implementing `disconnected`,\n * `reconnected` should also be implemented to be compatible with reconnection.\n *\n * Note that updates may occur while the directive is disconnected. As such,\n * directives should generally check the `this.isConnected` flag during\n * render/update to determine whether it is safe to subscribe to resources\n * that may prevent garbage collection.\n */\nexport abstract class AsyncDirective extends Directive {\n  // As opposed to other Disconnectables, AsyncDirectives always get notified\n  // when the RootPart connection changes, so the public `isConnected`\n  // is a locally stored variable initialized via its part's getter and synced\n  // via `_$notifyDirectiveConnectionChanged`. This is cheaper than using\n  // the _$isConnected getter, which has to look back up the tree each time.\n  /**\n   * The connection state for this Directive.\n   */\n  isConnected!: boolean;\n\n  // @internal\n  override _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /**\n   * Initialize the part with internal fields\n   * @param part\n   * @param parent\n   * @param attributeIndex\n   */\n  override _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    super._$initialize(part, parent, attributeIndex);\n    addDisconnectableToParent(this);\n    this.isConnected = part._$isConnected;\n  }\n  // This property needs to remain unminified.\n  /**\n   * Called from the core code when a directive is going away from a part (in\n   * which case `shouldRemoveFromParent` should be true), and from the\n   * `setChildrenConnected` helper function when recursively changing the\n   * connection state of a tree (in which case `shouldRemoveFromParent` should\n   * be false).\n   *\n   * @param isConnected\n   * @param isClearingDirective - True when the directive itself is being\n   *     removed; false when the tree is being disconnected\n   * @internal\n   */\n  override ['_$notifyDirectiveConnectionChanged'](\n    isConnected: boolean,\n    isClearingDirective = true\n  ) {\n    if (isConnected !== this.isConnected) {\n      this.isConnected = isConnected;\n      if (isConnected) {\n        this.reconnected?.();\n      } else {\n        this.disconnected?.();\n      }\n    }\n    if (isClearingDirective) {\n      notifyChildrenConnectedChanged(this, isConnected);\n      removeDisconnectableFromParent(this);\n    }\n  }\n\n  /**\n   * Sets the value of the directive's Part outside the normal `update`/`render`\n   * lifecycle of a directive.\n   *\n   * This method should not be called synchronously from a directive's `update`\n   * or `render`.\n   *\n   * @param directive The directive to update\n   * @param value The value to set\n   */\n  setValue(value: unknown) {\n    if (isSingleExpression(this.__part as unknown as PartInfo)) {\n      this.__part._$setValue(value, this);\n    } else {\n      // this.__attributeIndex will be defined in this case, but\n      // assert it in dev mode\n      if (DEV_MODE && this.__attributeIndex === undefined) {\n        throw new Error(`Expected this.__attributeIndex to be a number`);\n      }\n      const newValues = [...(this.__part._$committedValue as Array<unknown>)];\n      newValues[this.__attributeIndex!] = value;\n      (this.__part as AttributePart)._$setValue(newValues, this, 0);\n    }\n  }\n\n  /**\n   * User callbacks for implementing logic to release any resources/subscriptions\n   * that may have been retained by this directive. Since directives may also be\n   * re-connected, `reconnected` should also be implemented to restore the\n   * working state of the directive prior to the next render.\n   */\n  protected disconnected() {}\n  protected reconnected() {}\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {nothing, ElementPart} from '../lit-html.js';\nimport {directive, AsyncDirective} from '../async-directive.js';\n\n/**\n * Creates a new Ref object, which is container for a reference to an element.\n */\nexport const createRef = <T = Element>() => new Ref<T>();\n\n/**\n * An object that holds a ref value.\n */\nclass Ref<T = Element> {\n  /**\n   * The current Element value of the ref, or else `undefined` if the ref is no\n   * longer rendered.\n   */\n  readonly value?: T;\n}\n\nexport type {Ref};\n\ninterface RefInternal {\n  value: Element | undefined;\n}\n\n// When callbacks are used for refs, this map tracks the last value the callback\n// was called with, for ensuring a directive doesn't clear the ref if the ref\n// has already been rendered to a new spot. It is double-keyed on both the\n// context (`options.host`) and the callback, since we auto-bind class methods\n// to `options.host`.\nconst lastElementForContextAndCallback = new WeakMap<\n  object,\n  WeakMap<Function, Element | undefined>\n>();\n\nexport type RefOrCallback<T = Element> = Ref<T> | ((el: T | undefined) => void);\n\nclass RefDirective extends AsyncDirective {\n  private _element?: Element;\n  private _ref?: RefOrCallback;\n  private _context?: object;\n\n  render(_ref?: RefOrCallback) {\n    return nothing;\n  }\n\n  override update(part: ElementPart, [ref]: Parameters<this['render']>) {\n    const refChanged = ref !== this._ref;\n    if (refChanged && this._ref !== undefined) {\n      // The ref passed to the directive has changed;\n      // unset the previous ref's value\n      this._updateRefValue(undefined);\n    }\n    if (refChanged || this._lastElementForRef !== this._element) {\n      // We either got a new ref or this is the first render;\n      // store the ref/element & update the ref value\n      this._ref = ref;\n      this._context = part.options?.host;\n      this._updateRefValue((this._element = part.element));\n    }\n    return nothing;\n  }\n\n  private _updateRefValue(element: Element | undefined) {\n    if (!this.isConnected) {\n      element = undefined;\n    }\n    if (typeof this._ref === 'function') {\n      // If the current ref was called with a previous value, call with\n      // `undefined`; We do this to ensure callbacks are called in a consistent\n      // way regardless of whether a ref might be moving up in the tree (in\n      // which case it would otherwise be called with the new value before the\n      // previous one unsets it) and down in the tree (where it would be unset\n      // before being set). Note that element lookup is keyed by\n      // both the context and the callback, since we allow passing unbound\n      // functions that are called on options.host, and we want to treat\n      // these as unique \"instances\" of a function.\n      const context = this._context ?? globalThis;\n      let lastElementForCallback =\n        lastElementForContextAndCallback.get(context);\n      if (lastElementForCallback === undefined) {\n        lastElementForCallback = new WeakMap();\n        lastElementForContextAndCallback.set(context, lastElementForCallback);\n      }\n      if (lastElementForCallback.get(this._ref) !== undefined) {\n        this._ref.call(this._context, undefined);\n      }\n      lastElementForCallback.set(this._ref, element);\n      // Call the ref with the new element value\n      if (element !== undefined) {\n        this._ref.call(this._context, element);\n      }\n    } else {\n      (this._ref as RefInternal)!.value = element;\n    }\n  }\n\n  private get _lastElementForRef() {\n    return typeof this._ref === 'function'\n      ? lastElementForContextAndCallback\n          .get(this._context ?? globalThis)\n          ?.get(this._ref)\n      : this._ref?.value;\n  }\n\n  override disconnected() {\n    // Only clear the box if our element is still the one in it (i.e. another\n    // directive instance hasn't rendered its element to it before us); that\n    // only happens in the event of the directive being cleared (not via manual\n    // disconnection)\n    if (this._lastElementForRef === this._element) {\n      this._updateRefValue(undefined);\n    }\n  }\n\n  override reconnected() {\n    // If we were manually disconnected, we can safely put our element back in\n    // the box, since no rendering could have occurred to change its state\n    this._updateRefValue(this._element);\n  }\n}\n\n/**\n * Sets the value of a Ref object or calls a ref callback with the element it's\n * bound to.\n *\n * A Ref object acts as a container for a reference to an element. A ref\n * callback is a function that takes an element as its only argument.\n *\n * The ref directive sets the value of the Ref object or calls the ref callback\n * during rendering, if the referenced element changed.\n *\n * Note: If a ref callback is rendered to a different element position or is\n * removed in a subsequent render, it will first be called with `undefined`,\n * followed by another call with the new element it was rendered to (if any).\n *\n * ```js\n * // Using Ref object\n * const inputRef = createRef();\n * render(html`<input ${ref(inputRef)}>`, container);\n * inputRef.value.focus();\n *\n * // Using callback\n * const callback = (inputElement) => inputElement.focus();\n * render(html`<input ${ref(callback)}>`, container);\n * ```\n */\nexport const ref = directive(RefDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {RefDirective};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { c as customElement } from \"../../chunks/runtime.js\";\nimport { ref } from \"lit-html/directives/ref.js\";\nimport { html } from \"lit\";\nimport { LitElement, safeClassMap } from \"@arcgis/lumina\";\nimport { c as createObserver } from \"../../chunks/observers.js\";\nimport { c as componentFocusable } from \"../../chunks/component.js\";\nimport { z as whenAnimationDone } from \"../../chunks/dom.js\";\nimport { css } from \"@lit/reactive-element/css-tag.js\";\nconst CSS = {\n  frame: \"frame\",\n  frameAdvancing: \"frame--advancing\",\n  frameRetreating: \"frame--retreating\"\n};\nconst styles = css`:host{box-sizing:border-box;background-color:var(--calcite-color-foreground-1);color:var(--calcite-color-text-2);font-size:var(--calcite-font-size--1)}:host *{box-sizing:border-box}:host{position:relative;display:flex;inline-size:100%;flex:1 1 auto;align-items:stretch;overflow:hidden;background-color:transparent}:host .frame{position:relative;margin:0;display:flex;inline-size:100%;flex:1 1 auto;flex-direction:column;align-items:stretch;padding:0;animation-name:none;animation-duration:var(--calcite-animation-timing);background-color:var(--calcite-flow-background-color)}:host ::slotted(*){display:none;block-size:100%}:host ::slotted(*[selected]){display:flex}:host ::slotted(.calcite-match-height:last-child){display:flex;flex:1 1 auto;overflow:hidden}:host .frame--advancing{animation-name:calcite-frame-advance}:host .frame--retreating{animation-name:calcite-frame-retreat}@keyframes calcite-frame-advance{0%{--tw-bg-opacity: .5;transform:translate3d(50px,0,0)}to{--tw-bg-opacity: 1;transform:translateZ(0)}}@keyframes calcite-frame-retreat{0%{--tw-bg-opacity: .5;transform:translate3d(-50px,0,0)}to{--tw-bg-opacity: 1;transform:translateZ(0)}}:host([hidden]){display:none}[hidden]{display:none}`;\nclass Flow extends LitElement {\n  constructor() {\n    super();\n    this.itemMutationObserver = createObserver(\"mutation\", () => this.updateItemsAndProps());\n    this.items = [];\n    this.selectedIndex = -1;\n    this.flowDirection = \"standby\";\n    this.listen(\"calciteInternalFlowItemChange\", this.handleCalciteInternalFlowItemChange);\n    this.listen(\"calciteFlowItemBack\", this.handleItemBackClick);\n  }\n  static {\n    this.properties = { flowDirection: [16, {}, { state: true }], customItemSelectors: 1 };\n  }\n  static {\n    this.styles = styles;\n  }\n  async back() {\n    const { items, selectedIndex } = this;\n    const selectedItem = items[selectedIndex];\n    const nextSelectedItem = items[selectedIndex - 1];\n    if (!selectedItem || !nextSelectedItem) {\n      return;\n    }\n    const beforeBack = selectedItem.beforeBack ? selectedItem.beforeBack : () => Promise.resolve();\n    try {\n      await beforeBack.call(selectedItem);\n    } catch {\n      return;\n    }\n    selectedItem.selected = false;\n    nextSelectedItem.selected = true;\n    return nextSelectedItem;\n  }\n  async setFocus() {\n    await componentFocusable(this);\n    const { items } = this;\n    const selectedItem = items[this.selectedIndex];\n    return selectedItem?.setFocus();\n  }\n  connectedCallback() {\n    super.connectedCallback();\n    this.itemMutationObserver?.observe(this.el, { childList: true, subtree: true });\n  }\n  willUpdate(changes) {\n    if (changes.has(\"flowDirection\") && (this.hasUpdated || this.flowDirection !== \"standby\")) {\n      this.handleFlowDirectionChange(this.flowDirection);\n    }\n  }\n  loaded() {\n    this.updateItemsAndProps();\n  }\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    this.itemMutationObserver?.disconnect();\n  }\n  async handleFlowDirectionChange(flowDirection) {\n    if (flowDirection === \"standby\") {\n      return;\n    }\n    await whenAnimationDone(this.frameEl, flowDirection === \"retreating\" ? \"calcite-frame-retreat\" : \"calcite-frame-advance\");\n    this.resetFlowDirection();\n  }\n  handleCalciteInternalFlowItemChange(event) {\n    event.stopPropagation();\n    this.updateFlowProps();\n  }\n  async handleItemBackClick(event) {\n    if (event.defaultPrevented) {\n      return;\n    }\n    await this.back();\n    return this.setFocus();\n  }\n  resetFlowDirection() {\n    this.flowDirection = \"standby\";\n  }\n  getFlowDirection(oldSelectedIndex, newSelectedIndex) {\n    const allowRetreatingDirection = oldSelectedIndex > 0;\n    const allowAdvancingDirection = oldSelectedIndex > -1 && newSelectedIndex > 0;\n    if (!allowAdvancingDirection && !allowRetreatingDirection) {\n      return \"standby\";\n    }\n    return newSelectedIndex < oldSelectedIndex ? \"retreating\" : \"advancing\";\n  }\n  updateItemsAndProps() {\n    const { customItemSelectors, el } = this;\n    const newItems = Array.from(el.querySelectorAll(`calcite-flow-item${customItemSelectors ? `,${customItemSelectors}` : \"\"}`)).filter((flowItem) => flowItem.closest(\"calcite-flow\") === el);\n    this.items = newItems;\n    this.ensureSelectedFlowItemExists();\n    this.updateFlowProps();\n  }\n  updateFlowProps() {\n    const { selectedIndex, items } = this;\n    const foundSelectedIndex = this.findSelectedFlowItemIndex(items);\n    items.forEach((flowItem, index) => {\n      const currentlySelected = index === foundSelectedIndex;\n      if (!currentlySelected) {\n        flowItem.menuOpen = false;\n      }\n      flowItem.showBackButton = currentlySelected && foundSelectedIndex > 0;\n    });\n    if (foundSelectedIndex === -1) {\n      return;\n    }\n    if (selectedIndex !== foundSelectedIndex) {\n      this.flowDirection = this.getFlowDirection(selectedIndex, foundSelectedIndex);\n    }\n    this.selectedIndex = foundSelectedIndex;\n  }\n  findSelectedFlowItemIndex(items) {\n    const selectedItem = items.slice(0).reverse().find((item) => !!item.selected);\n    return items.indexOf(selectedItem);\n  }\n  ensureSelectedFlowItemExists() {\n    const { items } = this;\n    const foundSelectedIndex = this.findSelectedFlowItemIndex(items);\n    if (foundSelectedIndex !== -1) {\n      return;\n    }\n    const lastItem = items[items.length - 1];\n    if (lastItem) {\n      lastItem.selected = true;\n    }\n  }\n  setFrameEl(el) {\n    this.frameEl = el;\n  }\n  render() {\n    const { flowDirection } = this;\n    const frameDirectionClasses = {\n      [CSS.frame]: true,\n      [CSS.frameAdvancing]: flowDirection === \"advancing\",\n      [CSS.frameRetreating]: flowDirection === \"retreating\"\n    };\n    return html`<div class=${safeClassMap(frameDirectionClasses)} ${ref(this.setFrameEl)}><slot></slot></div>`;\n  }\n}\ncustomElement(\"calcite-flow\", Flow);\nexport {\n  Flow\n};\n","/*! All material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\nv3.2.1 */\nimport { l as logger } from \"./logger.js\";\nfunction getIconScale(componentScale) {\n  return componentScale === \"l\" ? \"m\" : \"s\";\n}\nfunction warnIfMissingRequiredProp(component, newProp, deprecatedProp) {\n  if (!component[newProp] && !component[deprecatedProp]) {\n    logger.warn(`[${component.el.localName}] \"${newProp.toString()}\" or \"${deprecatedProp.toString()}\" is required.`);\n  }\n}\nfunction isHidden(el) {\n  return el.hidden || el.itemHidden;\n}\nasync function componentFocusable(component) {\n  await component.componentOnReady();\n  await component.updateComplete;\n}\nexport {\n  componentFocusable as c,\n  getIconScale as g,\n  isHidden as i,\n  warnIfMissingRequiredProp as w\n};\n"],"names":["createObserver","type","callback","options","isServer","Observer","ExtendedMutationObserver","window","MutationObserver","constructor","super","this","observedEntry","observe","target","push","unobserve","newObservedEntries","filter","observed","takeRecords","disconnect","forEach","IntersectionObserver","ResizeObserver","getObserver","loggedDeprecations","Set","logLevels","trace","debug","info","warn","error","off","forwardToConsole","level","logLevel","willLog","_len","arguments","length","data","Array","_key","console","call","listFormatter","logger","message","deprecated","context","_ref","component","name","suggested","removalVersion","key","concat","has","add","multiSuggestions","isArray","Intl","ListFormat","style","format","map","suggestion","s","notifyChildrenConnectedChanged","i","t","e","_$AN","_i$_$AO","_$AO","o","_e","_$AM","delete","size","r","c","h","n","undefined","_$AH","_i$_$AP","_i$_$AQ","CHILD","_$AP","_$AQ","f","_$AT","isConnected","_$AU","_this$reconnected","_this$disconnected","reconnected","disconnected","setValue","_$Ct","_$AI","_$Ci","createRef","WeakMap","render","update","_i$options","G","rt","lt","ct","ht","host","element","_this$ht","globalThis","get","set","value","_o$get","_this$ht2","_this$G","CSS","styles","css","_templateObject","_taggedTemplateLiteral","Flow","LitElement","itemMutationObserver","updateItemsAndProps","items","selectedIndex","flowDirection","listen","handleCalciteInternalFlowItemChange","handleItemBackClick","back","selectedItem","nextSelectedItem","beforeBack","Promise","resolve","_unused","selected","setFocus","componentFocusable","connectedCallback","_this$itemMutationObs","el","childList","subtree","willUpdate","changes","hasUpdated","handleFlowDirectionChange","loaded","disconnectedCallback","_this$itemMutationObs2","whenAnimationDone","frameEl","resetFlowDirection","event","stopPropagation","updateFlowProps","defaultPrevented","getFlowDirection","oldSelectedIndex","newSelectedIndex","customItemSelectors","newItems","from","querySelectorAll","flowItem","closest","ensureSelectedFlowItemExists","foundSelectedIndex","findSelectedFlowItemIndex","index","currentlySelected","menuOpen","showBackButton","slice","reverse","find","item","indexOf","lastItem","setFrameEl","frameDirectionClasses","html","_templateObject2","safeClassMap","ref","_Flow","properties","state","customElement","getIconScale","componentScale","async","componentOnReady","updateComplete"],"sourceRoot":""}